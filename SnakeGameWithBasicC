// This game is a bad version of snake game because game window is updating with every snake move, i will not update this code, this game has basic C codes.
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <conio.h>
#include <time.h>

#define MAX_RANGE 10000

struct Point {
    int x;
    int y;
};

struct Snake {
    struct Point Points[MAX_RANGE];
    int size;
};

void sizeAdd(struct Snake *snake, int x, int y, int *length) {
    struct Point newPoint;
    newPoint.x = x;
    newPoint.y = y;

    snake->Points[snake->size++] = newPoint;
    *length += 1;
}

void print(char *game[], struct Snake *snake, int q) {
    game[snake->Points[q].y][snake->Points[q].x] = '0';
}

void print2(char *game[], struct Snake *snake, int q) {
    game[snake->Points[q].y][snake->Points[q].x] = '@';
}

void food(char *game[], int *a) {
    int b = *a;
        int x, y;
        do {
            x = rand() % (b - 3) + 1;
            y = rand() % (4 * b - 2) + 1;
        } while (game[x][y] != ' ');
        game[x][y] = 'U';
}

void SnakeHead(char *game[], struct Snake *snake, int direction, int *px, int *py, int *dead, int *length, int *a) {
    int x, y;
    x = snake->Points[0].x;
    y = snake->Points[0].y;

    *px = x;
    *py = y;

    switch (direction) {
        case 1: x++;
            break;
        case 2: y++;
            break;
        case 3: x--;
            break;
        case 4: y--;
            break;
    }
    snake->Points[0].x = x;
    snake->Points[0].y = y;

    if (game[y][x] == '0' || game[y][x] == '*') {
        *dead = 1;
    } else if (game[y][x] == 'U') {
        sizeAdd(snake, x, y, length);
        food(game, a);
    }
}

void SnakeTail(char *game[], struct Snake *snake, int *px, int *py, int q) {
    int x, y;
    x = snake->Points[q].x;
    y = snake->Points[q].y;

    snake->Points[q].x = *px;
    snake->Points[q].y = *py;

    game[y][x] = ' ';

    *px = x;
    *py = y;
}

int main() {
    int speed;
    int *pspeed;
    pspeed = &speed;
    *pspeed = 650;

    struct Snake snake;
    snake.size = 0;

    srand(time(NULL));

    int length = 0;

    int direction = 1;
    int x, y;
    int *px, *py;
    px = &x;
    py = &y;

    *px = 2;
    *py = 2;
    sizeAdd(&snake, x, y, &length);
    int a;
    int dead = 0;

    do {
        printf("\nWelcome! Write a Number For Game Size(7 to 40):");
        scanf("%d", &a);
    } while (a < 7 || a > 40);

    system("cls");

    char **game = (char **)malloc(a * sizeof(char *));
    for (int i = 0; i < a; i++)
        game[i] = (char *)malloc((a * 4 + 1) * sizeof(char));

    for (int i = 1; i < a - 1; i++) {
        for (int j = 1; j < a * 4 - 1; j++)
            game[i][j] = ' ';
    }
    for (int i = 0; i < a - 1; i++)
        game[i][a * 4] = '\n';

    game[a - 1][4 * a] = '\0';

    for (int i = 0; i < a * 4; i++)
        game[0][i] = '*';
    for (int i = 1; i < a - 1; i++) {
        game[i][0] = '*';
        game[i][a * 4 - 1] = '*';
    }
    for (int i = 1; i < a * 4 - 1; i++)
        game[a - 1][i] = '*';
    for (int i = 0; i < a * 4; i++)
        game[a - 1][i] = '*';

    game[5][10] = 'U';

    print(game, &snake, 0);

    char tus;



    while(1){
        while(dead==1){
    system("cls");
    printf("GAME OVER\nScore: %d", length-1);

    for(int i=0;i<a;i++)
        free(game[i]);
    free(game);
    free(pspeed);
    return 0;
    }
        if(kbhit()){
            tus = getch();
            if(tus == 0 || tus == 224){
                tus = getch();
                switch(tus){
                    case 75:
                        if(direction!=1)
                            direction=3;
                        else
                            *pspeed -= 150;
                        break;
                    case 72:
                        if(direction!=2)
                            direction =4;
                        else
                            *pspeed -= 150;
                        break;
                    case 77:
                        if(direction!=3)
                            direction = 1;
                        else
                            *pspeed -= 150;
                        break;
                    case 80:
                        if(direction!=4)
                            direction = 2;
                        else
                            *pspeed -= 150;
                        break;
                }
            }
            switch(tus){
                case 'w':
                    if(direction==4){
                        *pspeed -= 150;
                        break;
                    }
                    else if(direction!=2){
                        direction = 4;
                        break;
                    }
                    else
                        *pspeed +=150;
                        break;
                case 'a':
                    if(direction==3){
                        *pspeed -= 150;
                        break;
                    }
                    else if(direction!=1){
                        direction = 3;
                        break;
                    }
                    else
                        *pspeed +=150;
                    break;
                case 'd':
                    if(direction==1){
                        *pspeed -=150;
                        break;
                    }
                    else if(direction!=3){
                        direction = 1;
                        break;
                    }
                    else
                        *pspeed += 150;
                    break;
                case 's':
                    if(direction==2){
                        *pspeed -=150;
                        break;
                    }
                    else if(direction!=4){
                        direction = 2;
                        break;
                    }
                    else
                        *pspeed += 150;
                    break;
                case 'f':
                    sizeAdd(&snake, x, y, &length);
            }
        }
        SnakeHead(game, &snake, direction, px, py, &dead, &length, &a);
        game[*py][*px] = ' ';
        for(int i=1;i<length;i++){
            SnakeTail(game, &snake, &x, &y, i);

            }
            print2(game, &snake, 0);
        for(int i=1;i<length;i++)
        print(game, &snake, i);

    for(int i=0;i<a;i++){
        for(int j=0;j<a*4+1;j++)
            printf("%c",game[i][j]);
    }
    printf("\nScore: %d",snake.size-1);

    if(*pspeed<200)
        *pspeed = 200;
    else if(*pspeed>950)
        *pspeed =950;
    Sleep(*pspeed);
    system("cls");
//printf("\033[H\033[J"); or system("cls");

    }

    return 0;
//~EmrenyuS
}

